@page "/pasivos/sumar/{phoneNumber}"
@using FinanzasHogar.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager

<h3>Sumar Pasivos</h3>

<div class="sumar-pasivos-container">
    <div class="form-group">
        <label>Tipos de Pasivos</label>
        <div>
            @foreach (var tipo in TipoPasivo.Tipos)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="@tipo" @onchange="(e) => UpdateSelectedTipos(e, tipo)">
                    <label class="form-check-label" for="@tipo">@tipo</label>
                </div>
            }
        </div>
        <small class="form-text text-muted">Seleccione uno o más tipos de pasivos.</small>
        <button class="btn btn-primary mt-2" @onclick="CalcularSuma">Calcular</button>
    </div>

    @if (mostrarResultado)
    {
        <div class="result-container alert alert-info mt-3">
            <h4>Detalle de Pasivos Seleccionados:</h4>
            <table class="table table-bordered mt-3">
                <thead>
                    <tr>
                        <th>Tipo de Pasivo</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pasivo in pasivosSeleccionados)
                    {
                        <tr>
                            <td>@pasivo.Tipo</td>
                            <td>@pasivo.Monto.ToString("C")</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td><strong>@sumaTotal.ToString("C")</strong></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
</div>

@code {
    [Parameter] public string phoneNumber { get; set; }

    private List<string> selectedTipos = new List<string>();
    private decimal sumaTotal = 0;
    private bool mostrarResultado = false;
    private IdentityUser user;
    private List<Pasivo> pasivosSeleccionados = new List<Pasivo>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.Users.FirstOrDefaultAsync(u => u.PhoneNumber == phoneNumber);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private void UpdateSelectedTipos(ChangeEventArgs e, string tipo)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            selectedTipos.Add(tipo);
        }
        else
        {
            selectedTipos.Remove(tipo);
        }
    }

    private void CalcularSuma()
    {
        mostrarResultado = false;
        sumaTotal = 0;
        pasivosSeleccionados.Clear();

        if (selectedTipos.Count > 0)
        {
            pasivosSeleccionados = DbContext.Pasivos
                .Where(p => selectedTipos.Contains(p.Tipo) && p.UsuarioId == user.Id)
                .ToList();
        }
        else
        {
            pasivosSeleccionados = DbContext.Pasivos
                .Where(p => p.UsuarioId == user.Id)
                .ToList();
        }

        sumaTotal = pasivosSeleccionados.Sum(p => p.Monto);
        mostrarResultado = true;
    }
}
